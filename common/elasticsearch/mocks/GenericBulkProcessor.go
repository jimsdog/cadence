// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	elasticsearch "github.com/uber/cadence/common/elasticsearch"
	log "github.com/uber/cadence/common/log"

	metrics "github.com/uber/cadence/common/metrics"

	mock "github.com/stretchr/testify/mock"
)

// GenericBulkProcessor is an autogenerated mock type for the GenericBulkProcessor type
type GenericBulkProcessor struct {
	mock.Mock
}

// Add provides a mock function with given fields: request
func (_m *GenericBulkProcessor) Add(request *elasticsearch.GenericBulkableAddRequest) {
	_m.Called(request)
}

// Close provides a mock function with given fields:
func (_m *GenericBulkProcessor) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *GenericBulkProcessor) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveKafkaKey provides a mock function with given fields: request, logger, client
func (_m *GenericBulkProcessor) RetrieveKafkaKey(request elasticsearch.GenericBulkableRequest, logger log.Logger, client metrics.Client) string {
	ret := _m.Called(request, logger, client)

	var r0 string
	if rf, ok := ret.Get(0).(func(elasticsearch.GenericBulkableRequest, log.Logger, metrics.Client) string); ok {
		r0 = rf(request, logger, client)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *GenericBulkProcessor) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *GenericBulkProcessor) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
